{"ast":null,"code":"var _jsxFileName = \"D:\\\\DProjects\\\\StockApp\\\\frontend\\\\src\\\\Components\\\\BalanceSheet\\\\BalanceSheet.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useOutletContext } from 'react-router-dom';\nimport { getBalanceSheet } from '../../api';\nimport RatioList from '../RatioList/RatioList';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst config = [{\n  label: \"Денежные средства\",\n  render: company => company.cashAndCashEquivalents\n}, {\n  label: \"Запасы\",\n  render: company => company.inventory\n}, {\n  label: \"Прочие оборотные активы\",\n  render: company => company.otherCurrentAssets\n}, {\n  label: \"Доля меньшинства\",\n  render: company => company.minorityInterest\n}, {\n  label: \"Прочие внеоборотные активы\",\n  render: company => company.otherNonCurrentAssets\n}, {\n  label: \"Долгосрочная задолженность\",\n  render: company => company.longTermDebt\n}, {\n  label: \"Общая задолженность\",\n  render: company => company.totalDebt // Исправлено поле\n}];\nfunction BalanceSheet({}) {\n  _s();\n  const ticker = useOutletContext();\n  const [balanceSheet, setBalanceSheet] = useState();\n  useEffect(() => {\n    const getData = async () => {\n      const value = await getBalanceSheet(ticker);\n      setBalanceSheet(value === null || value === void 0 ? void 0 : value.data[0]);\n    };\n    getData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: balanceSheet ? /*#__PURE__*/_jsxDEV(RatioList, {\n      config: config,\n      data: balanceSheet\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\u041A\\u043E\\u043C\\u043F\\u0430\\u043D\\u0438\\u044F \\u043D\\u0435 \\u043D\\u0430\\u0439\\u0434\\u0435\\u043D\\u0430!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n_s(BalanceSheet, \"ERJd7Ry5aqlvEGIGW73IDAoaXMc=\", false, function () {\n  return [useOutletContext];\n});\n_c = BalanceSheet;\nexport default BalanceSheet;\nvar _c;\n$RefreshReg$(_c, \"BalanceSheet\");","map":{"version":3,"names":["React","useEffect","useState","useOutletContext","getBalanceSheet","RatioList","jsxDEV","_jsxDEV","Fragment","_Fragment","config","label","render","company","cashAndCashEquivalents","inventory","otherCurrentAssets","minorityInterest","otherNonCurrentAssets","longTermDebt","totalDebt","BalanceSheet","_s","ticker","balanceSheet","setBalanceSheet","getData","value","data","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/DProjects/StockApp/frontend/src/Components/BalanceSheet/BalanceSheet.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { CompanyBalanceSheet } from '../../company';\r\nimport { useOutletContext } from 'react-router-dom';\r\nimport { getBalanceSheet } from '../../api';\r\nimport RatioList from '../RatioList/RatioList';\r\n\r\ntype Props = {}\r\nconst config = [\r\n  {\r\n    label: \"Денежные средства\",\r\n    render: (company: CompanyBalanceSheet) => company.cashAndCashEquivalents,\r\n  },\r\n  {\r\n    label: \"Запасы\",\r\n    render: (company: CompanyBalanceSheet) => company.inventory,\r\n  },\r\n  {\r\n    label: \"Прочие оборотные активы\",\r\n    render: (company: CompanyBalanceSheet) => company.otherCurrentAssets,\r\n  },\r\n  {\r\n    label: \"Доля меньшинства\",\r\n    render: (company: CompanyBalanceSheet) => company.minorityInterest,\r\n  },\r\n  {\r\n    label: \"Прочие внеоборотные активы\",\r\n    render: (company: CompanyBalanceSheet) => company.otherNonCurrentAssets,\r\n  },\r\n  {\r\n    label: \"Долгосрочная задолженность\",\r\n    render: (company: CompanyBalanceSheet) => company.longTermDebt,\r\n  },\r\n  {\r\n    label: \"Общая задолженность\",\r\n    render: (company: CompanyBalanceSheet) => company.totalDebt,  // Исправлено поле\r\n  },\r\n];\r\nfunction BalanceSheet({}: Props) {\r\n    const ticker = useOutletContext<string>();\r\n    const [balanceSheet, setBalanceSheet] = useState<CompanyBalanceSheet>();\r\n    useEffect(() => {\r\n        const getData = async () => {\r\n            const value = await getBalanceSheet(ticker!);\r\n            setBalanceSheet(value?.data[0]);\r\n        };\r\n        getData();\r\n    }, []);\r\n  return <>  \r\n    {balanceSheet ? (\r\n        <RatioList config={config} data={balanceSheet} />\r\n    ) : (\r\n        <h1>\r\n            Компания не найдена!\r\n        </h1>\r\n    )}\r\n  </>\r\n}\r\n\r\nexport default BalanceSheet"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAElD,SAASC,gBAAgB,QAAQ,kBAAkB;AACnD,SAASC,eAAe,QAAQ,WAAW;AAC3C,OAAOC,SAAS,MAAM,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAG/C,MAAMC,MAAM,GAAG,CACb;EACEC,KAAK,EAAE,mBAAmB;EAC1BC,MAAM,EAAGC,OAA4B,IAAKA,OAAO,CAACC;AACpD,CAAC,EACD;EACEH,KAAK,EAAE,QAAQ;EACfC,MAAM,EAAGC,OAA4B,IAAKA,OAAO,CAACE;AACpD,CAAC,EACD;EACEJ,KAAK,EAAE,yBAAyB;EAChCC,MAAM,EAAGC,OAA4B,IAAKA,OAAO,CAACG;AACpD,CAAC,EACD;EACEL,KAAK,EAAE,kBAAkB;EACzBC,MAAM,EAAGC,OAA4B,IAAKA,OAAO,CAACI;AACpD,CAAC,EACD;EACEN,KAAK,EAAE,4BAA4B;EACnCC,MAAM,EAAGC,OAA4B,IAAKA,OAAO,CAACK;AACpD,CAAC,EACD;EACEP,KAAK,EAAE,4BAA4B;EACnCC,MAAM,EAAGC,OAA4B,IAAKA,OAAO,CAACM;AACpD,CAAC,EACD;EACER,KAAK,EAAE,qBAAqB;EAC5BC,MAAM,EAAGC,OAA4B,IAAKA,OAAO,CAACO,SAAS,CAAG;AAChE,CAAC,CACF;AACD,SAASC,YAAYA,CAAC,CAAQ,CAAC,EAAE;EAAAC,EAAA;EAC7B,MAAMC,MAAM,GAAGpB,gBAAgB,CAAS,CAAC;EACzC,MAAM,CAACqB,YAAY,EAAEC,eAAe,CAAC,GAAGvB,QAAQ,CAAsB,CAAC;EACvED,SAAS,CAAC,MAAM;IACZ,MAAMyB,OAAO,GAAG,MAAAA,CAAA,KAAY;MACxB,MAAMC,KAAK,GAAG,MAAMvB,eAAe,CAACmB,MAAO,CAAC;MAC5CE,eAAe,CAACE,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAEC,IAAI,CAAC,CAAC,CAAC,CAAC;IACnC,CAAC;IACDF,OAAO,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;EACR,oBAAOnB,OAAA,CAAAE,SAAA;IAAAoB,QAAA,EACJL,YAAY,gBACTjB,OAAA,CAACF,SAAS;MAACK,MAAM,EAAEA,MAAO;MAACkB,IAAI,EAAEJ;IAAa;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,gBAEjD1B,OAAA;MAAAsB,QAAA,EAAI;IAEJ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI;EACP,gBACD,CAAC;AACL;AAACX,EAAA,CAnBQD,YAAY;EAAA,QACFlB,gBAAgB;AAAA;AAAA+B,EAAA,GAD1Bb,YAAY;AAqBrB,eAAeA,YAAY;AAAA,IAAAa,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}