{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport { useOutletContext } from 'react-router';\nimport { getKeyMetrics } from '../../api';\nconst tableConfig = [{\n  label: \"Стоимость компании (EV)\",\n  render: company => company.enterpriseValueTTM,\n  subTitle: \"Полная стоимость компании (капитализация + долг - денежные средства)\"\n}, {\n  label: \"Коэффициент текущей ликвидности\",\n  render: company => company.currentRatioTTM,\n  subTitle: \"Способность покрывать краткосрочные обязательства\"\n}, {\n  label: \"Свободный денежный поток на акцию\",\n  render: company => company.freeCashFlowPerShareTTM,\n  subTitle: \"Свободные денежные средства на одну акцию\"\n}, {\n  label: \"P/B (Цена/Балансовая стоимость)\",\n  render: company => company.priceToBookRatioTTM,\n  subTitle: \"Соотношение рыночной цены к балансовой стоимости\"\n}, {\n  label: \"Дивидендная доходность\",\n  render: company => company.dividendYieldTTM,\n  subTitle: \"Годовая дивидендная доходность\"\n}, {\n  label: \"P/E (Цена/Прибыль)\",\n  render: company => company.priceToEarningsRatioTTM,\n  subTitle: \"Соотношение цены акции к годовой прибыли\"\n}, {\n  label: \"Debt/Equity\",\n  render: company => company.debtToEquityRatioTTM,\n  subTitle: \"Соотношение заемного и собственного капитала\"\n}, {\n  label: \"Рентабельность активов\",\n  render: company => company.netProfitMarginTTM,\n  subTitle: \"Чистая рентабельность активов\"\n}];\nconst CompanyProfile = props => {\n  _s();\n  const ticker = useOutletContext();\n  const [companyData, setCompanyData] = useState();\n  useEffect(() => {\n    const getCompanyKeyMetrics = async () => {\n      const value = await getKeyMetrics(ticker);\n      setCompanyData(value === null || value === void 0 ? void 0 : value.data[0]);\n    };\n  }, []);\n  return {};\n};\n_s(CompanyProfile, \"oIWvfb9RHbVWP9I9E1ZAfgq5EdY=\", false, function () {\n  return [useOutletContext];\n});\n_c = CompanyProfile;\nexport default CompanyProfile;\nvar _c;\n$RefreshReg$(_c, \"CompanyProfile\");","map":{"version":3,"names":["useEffect","useState","useOutletContext","getKeyMetrics","tableConfig","label","render","company","enterpriseValueTTM","subTitle","currentRatioTTM","freeCashFlowPerShareTTM","priceToBookRatioTTM","dividendYieldTTM","priceToEarningsRatioTTM","debtToEquityRatioTTM","netProfitMarginTTM","CompanyProfile","props","_s","ticker","companyData","setCompanyData","getCompanyKeyMetrics","value","data","_c","$RefreshReg$"],"sources":["D:/DProjects/StockApp/frontend/src/Components/CompanyProfile/CompanyProfile.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { CompanyKeyMetrics } from '../../company';\r\nimport { useOutletContext } from 'react-router';\r\nimport { getKeyMetrics } from '../../api';\r\ntype Props = {};\r\n\r\nconst tableConfig = [\r\n  {\r\n    label: \"Стоимость компании (EV)\",\r\n    render: (company: CompanyKeyMetrics) => \r\n      company.enterpriseValueTTM,\r\n    subTitle: \"Полная стоимость компании (капитализация + долг - денежные средства)\",\r\n  },\r\n  {\r\n    label: \"Коэффициент текущей ликвидности\",\r\n    render: (company: CompanyKeyMetrics) =>\r\n      company.currentRatioTTM,\r\n    subTitle: \"Способность покрывать краткосрочные обязательства\",\r\n  },\r\n  {\r\n    label: \"Свободный денежный поток на акцию\",\r\n    render: (company: CompanyKeyMetrics) =>\r\n      company.freeCashFlowPerShareTTM,\r\n    subTitle: \"Свободные денежные средства на одну акцию\",\r\n  },\r\n  {\r\n    label: \"P/B (Цена/Балансовая стоимость)\",\r\n    render: (company: CompanyKeyMetrics) =>\r\n      company.priceToBookRatioTTM,\r\n    subTitle: \"Соотношение рыночной цены к балансовой стоимости\",\r\n  },\r\n  {\r\n    label: \"Дивидендная доходность\",\r\n    render: (company: CompanyKeyMetrics) =>\r\n      company.dividendYieldTTM,\r\n    subTitle: \"Годовая дивидендная доходность\",\r\n  },\r\n  {\r\n    label: \"P/E (Цена/Прибыль)\",\r\n    render: (company: CompanyKeyMetrics) => \r\n      company.priceToEarningsRatioTTM,\r\n    subTitle: \"Соотношение цены акции к годовой прибыли\",\r\n  },\r\n  {\r\n    label: \"Debt/Equity\",\r\n    render: (company: CompanyKeyMetrics) =>\r\n      company.debtToEquityRatioTTM,\r\n    subTitle: \"Соотношение заемного и собственного капитала\",\r\n  },\r\n  {\r\n    label: \"Рентабельность активов\",\r\n    render: (company: CompanyKeyMetrics) =>\r\n      company.netProfitMarginTTM, \r\n    subTitle: \"Чистая рентабельность активов\",\r\n  }\r\n];\r\n\r\nconst CompanyProfile = (props: Props) => {\r\n  const ticker = useOutletContext<string>();\r\n  const [companyData, setCompanyData] = useState<CompanyKeyMetrics>();\r\n  useEffect(() => {\r\n    const getCompanyKeyMetrics = async () => {\r\n      const value = await getKeyMetrics(ticker);\r\n      setCompanyData(value?.data[0]);\r\n    };\r\n  }, []);\r\n  return (\r\n    {}\r\n  )\r\n}\r\n\r\nexport default CompanyProfile"],"mappings":";AAAA,SAAgBA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAElD,SAASC,gBAAgB,QAAQ,cAAc;AAC/C,SAASC,aAAa,QAAQ,WAAW;AAGzC,MAAMC,WAAW,GAAG,CAClB;EACEC,KAAK,EAAE,yBAAyB;EAChCC,MAAM,EAAGC,OAA0B,IACjCA,OAAO,CAACC,kBAAkB;EAC5BC,QAAQ,EAAE;AACZ,CAAC,EACD;EACEJ,KAAK,EAAE,iCAAiC;EACxCC,MAAM,EAAGC,OAA0B,IACjCA,OAAO,CAACG,eAAe;EACzBD,QAAQ,EAAE;AACZ,CAAC,EACD;EACEJ,KAAK,EAAE,mCAAmC;EAC1CC,MAAM,EAAGC,OAA0B,IACjCA,OAAO,CAACI,uBAAuB;EACjCF,QAAQ,EAAE;AACZ,CAAC,EACD;EACEJ,KAAK,EAAE,iCAAiC;EACxCC,MAAM,EAAGC,OAA0B,IACjCA,OAAO,CAACK,mBAAmB;EAC7BH,QAAQ,EAAE;AACZ,CAAC,EACD;EACEJ,KAAK,EAAE,wBAAwB;EAC/BC,MAAM,EAAGC,OAA0B,IACjCA,OAAO,CAACM,gBAAgB;EAC1BJ,QAAQ,EAAE;AACZ,CAAC,EACD;EACEJ,KAAK,EAAE,oBAAoB;EAC3BC,MAAM,EAAGC,OAA0B,IACjCA,OAAO,CAACO,uBAAuB;EACjCL,QAAQ,EAAE;AACZ,CAAC,EACD;EACEJ,KAAK,EAAE,aAAa;EACpBC,MAAM,EAAGC,OAA0B,IACjCA,OAAO,CAACQ,oBAAoB;EAC9BN,QAAQ,EAAE;AACZ,CAAC,EACD;EACEJ,KAAK,EAAE,wBAAwB;EAC/BC,MAAM,EAAGC,OAA0B,IACjCA,OAAO,CAACS,kBAAkB;EAC5BP,QAAQ,EAAE;AACZ,CAAC,CACF;AAED,MAAMQ,cAAc,GAAIC,KAAY,IAAK;EAAAC,EAAA;EACvC,MAAMC,MAAM,GAAGlB,gBAAgB,CAAS,CAAC;EACzC,MAAM,CAACmB,WAAW,EAAEC,cAAc,CAAC,GAAGrB,QAAQ,CAAoB,CAAC;EACnED,SAAS,CAAC,MAAM;IACd,MAAMuB,oBAAoB,GAAG,MAAAA,CAAA,KAAY;MACvC,MAAMC,KAAK,GAAG,MAAMrB,aAAa,CAACiB,MAAM,CAAC;MACzCE,cAAc,CAACE,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAEC,IAAI,CAAC,CAAC,CAAC,CAAC;IAChC,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EACN,OACE,CAAC,CAAC;AAEN,CAAC;AAAAN,EAAA,CAZKF,cAAc;EAAA,QACHf,gBAAgB;AAAA;AAAAwB,EAAA,GAD3BT,cAAc;AAcpB,eAAeA,cAAc;AAAA,IAAAS,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}